import datetime
from telebot import types
from database import db_execute, db_fetchall
import scheduler  # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û scheduler, –∞ –Ω–µ send_reminder
from apscheduler.jobstores.base import JobLookupError


def send_reminder(chat_id, task_id, bot):
    task = db_fetchall("SELECT Task FROM Adds WHERE Id = ?", (task_id,))
    if task:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f'delete_task_{task_id}'),
            types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        )
        bot.send_message(chat_id, f'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task[0][0]}!', reply_markup=markup)

def start(message, bot):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!', reply_markup=markup)


def main_menu(message, bot):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add'),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='del')
    )
    markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data='show'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

def add_task(message, bot):
    task_text = message.text.strip()
    if not task_text:
        bot.send_message(message.chat.id, '‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
        return

    # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    task_id = db_execute("INSERT INTO Adds (ChatID, Task) VALUES (?, ?)", (message.chat.id, task_text))
    
    if task_id is None:  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–∞", callback_data=f'set_reminder_{task_id}'),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data='main_menu')
    )
    bot.send_message(message.chat.id, '‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?', reply_markup=markup)



def set_reminder_template(call, task_id, bot):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("5 –º–∏–Ω—É—Ç", callback_data=f'reminder_5_{task_id}'),
        types.InlineKeyboardButton("30 –º–∏–Ω—É—Ç", callback_data=f'reminder_30_{task_id}')
    )
    markup.add(
        types.InlineKeyboardButton("1 —á–∞—Å", callback_data=f'reminder_60_{task_id}'),
        types.InlineKeyboardButton("24 —á–∞—Å–∞", callback_data=f'reminder_1440_{task_id}')
    )
    markup.add(types.InlineKeyboardButton("–°–≤–æ—ë –≤—Ä–µ–º—è", callback_data=f'reminder_custom_{task_id}'))
    bot.send_message(call.message.chat.id, '‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', reply_markup=markup)

def set_reminder(message, task_id, bot):
    """–§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        reminder_time = datetime.datetime.strptime(message.text, '%d-%m-%Y %H:%M:%S')
        current_time = datetime.datetime.now()

        if reminder_time <= current_time:
            bot.send_message(message.chat.id, '‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!')
            return

        task_exists = db_fetchall("SELECT Id FROM Adds WHERE Id = ?", (task_id,))
        # if not task_exists:
        #     bot.send_message(message.chat.id, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        #     return

        db_execute("INSERT INTO Reminders (TaskID, ReminderTime) VALUES (?, ?)", 
                   (task_id, reminder_time.strftime("%Y-%m-%d %H:%M:%S")))

        scheduler.schedule_reminder(message.chat.id, task_id, reminder_time, bot)  # ‚úÖ –ù–æ–≤—ã–π –≤—ã–∑–æ–≤

        bot.send_message(message.chat.id, f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime("%Y-%m-%d %H:%M:%S")}!')

    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD-MM-YYYY HH:MM:SS.')
        bot.register_next_step_handler(message, set_reminder, task_id, bot)

def call_main_menu(call, bot):
    main_menu(call.message, bot)

def call_add(call, bot):
    bot.send_message(call.message.chat.id, 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
    bot.register_next_step_handler(call.message, add_task, bot)

def call_del(call, bot):
    tasks = db_fetchall("SELECT Id, Task FROM Adds WHERE ChatID = ?", (call.message.chat.id,))
    if tasks:
        markup = types.InlineKeyboardMarkup()
        for task in tasks:
            markup.add(types.InlineKeyboardButton(task[1], callback_data=f'delete_task_{task[0]}'))
        bot.send_message(call.message.chat.id, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, 'üì≠ –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.')

def call_show(call, bot):
    tasks = db_fetchall("SELECT Task FROM Adds WHERE ChatID = ?", (call.message.chat.id,))
    text = '\n'.join([f"{i+1}. {task[0]}" for i, task in enumerate(tasks)]) if tasks else 'üì≠ –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.'
    bot.send_message(call.message.chat.id, f'üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{text}')

def call_set_reminder(call, bot):
    task_id = int(call.data.replace('set_reminder_', ''))
    set_reminder_template(call, task_id, bot)



def call_reminder_template(call, bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."""
    data = call.data.split('_')
    minutes = data[1]
    
    try:
        task_id = int(data[2])
    except (IndexError, ValueError):
        bot.send_message(call.message.chat.id, '‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏.')
        return


    if minutes == 'custom':
        bot.send_message(call.message.chat.id, '‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY HH:MM:SS:')
        bot.register_next_step_handler(call.message, set_reminder, task_id, bot)
    else:
        try:
            minutes = int(minutes)
        except ValueError:
            bot.send_message(call.message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è.')
            return

        current_time = datetime.datetime.now()
        reminder_time = current_time + datetime.timedelta(minutes=minutes)
        
        db_execute(
            "INSERT INTO Reminders (TaskID, ReminderTime) VALUES (?, ?)",
            (task_id, reminder_time.strftime("%Y-%m-%d %H:%M:%S"))
        )

        scheduler.schedule_reminder(call.message.chat.id, task_id, reminder_time, bot)  # ‚úÖ –ù–æ–≤—ã–π –≤—ã–∑–æ–≤

        bot.send_message(
            call.message.chat.id,
            f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime("%d-%m-%Y %H:%M:%S")}!'
        )
def call_delete_task(call, bot):
    task_id = int(call.data.replace('delete_task_', ''))
    
    # 1. –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã Reminders
    reminders = db_fetchall("SELECT Id FROM Reminders WHERE TaskID = ?", (task_id,))
    for reminder in reminders:
        reminder_id = reminder[0]
        job_id = f'reminder_{reminder_id}'
        try:
            scheduler.remove_job(job_id)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        except JobLookupError:
            pass
        db_execute("DELETE FROM Reminders WHERE Id = ?", (reminder_id,))  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Reminders
    
    # 2. –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É –∏–∑ Adds
    success = db_execute("DELETE FROM Adds WHERE Id = ?", (task_id,))
    
    if success:
        bot.send_message(call.message.chat.id, 'üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!')
    else:
        bot.send_message(call.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏!')
    
    main_menu(call.message, bot)
